import streamlit as st
from crewai.flow import Flow, start
from automated_project_planing.crews.automated_project_crew.project_crew import ProjectCrew
from pydantic import BaseModel
import uuid

class ProjectState(BaseModel):
    id: uuid.UUID = uuid.uuid4()
    project: str = "Website"
    industry: str = "Technology"
    project_objectives: str = "Create a website for a small business"
    team_members: str = """
        - John Doe (Project Manager)
        - Jane Doe (Software Engineer)
        - Bob Smith (Designer)
        - Alice Johnson (QA Engineer)
        - Tom Brown (QA Engineer)
    """
    project_requirements: str = """
        - Create a responsive design that works well on desktop and mobile devices
        - Implement a modern, visually appealing user interface with a clean look
        - Develop a user-friendly navigation system with intuitive menu structure
        - Include an "About Us" page highlighting the company's history and values
        - Design a "Services" page showcasing the business's offerings with descriptions
        - Create a "Contact Us" page with a form and integrated map for communication
        - Implement a blog section for sharing industry news and company updates
        - Ensure fast loading times and optimize for search engines (SEO)
        - Integrate social media links and sharing capabilities
        - Include a testimonials section to showcase customer feedback and build trust
    """


class ProjectFlow(Flow[ProjectState]):
    initial_state = ProjectState

    @start()
    def generate_project_management(self):
        st.info("Generating Project Management Plan...")
        output = (
            ProjectCrew()
            .crew()
            .kickoff(inputs={
                "project_type": self.state.project,
                "project_objectives": self.state.project_objectives,
                "industry": self.state.industry,
                "team_members": self.state.team_members,
                "project_requirements": self.state.project_requirements
            })
        )
        return output


# Define a helper function to run the asynchronous project flow using asyncio.
def run_project_flow(project: str, industry: str, project_objectives: str, team_members: str, project_requirements: str):
    # Instantiate ProjectFlow and update the state with user-provided values.
    project_flow = ProjectFlow()
    project_flow.state.project = project
    project_flow.state.industry = industry
    project_flow.state.project_objectives = project_objectives
    project_flow.state.team_members = team_members
    project_flow.state.project_requirements = project_requirements

    # Run the asynchronous kickoff process.
    result  = project_flow.kickoff()

    # Return the project details as generated by the flow for display/download.
    return result


def main():
    st.title("AI-Driven Project Management Generator")
    st.write("Enter the details for your project and generate a comprehensive project plan.")

    # Capture user input for project details
    project = st.text_input("Project Name", "Website")
    industry = st.text_input("Industry", "Technology")
    project_objectives = st.text_area("Project Objectives", "Create a website for a small business")
    team_members = st.text_area("Team Members","""
    Enter team members with roles, one per line:
    - John Doe (Project Manager)
    - Jane Doe (Software Engineer)
    - Bob Smith (Designer)
    - Alice Johnson (QA Engineer)
    - Tom Brown (QA Engineer)
    """)
    project_requirements = st.text_area("Project Requirements","""
    Enter project requirements, one per line:
    - Create a responsive design
    - Implement a modern, visually appealing UI
    - Develop a user-friendly navigation system
    - Include an "About Us" page
    - Design a "Services" page
    - Create a "Contact Us" page
    - Ensure fast loading times and optimize for SEO
    - Integrate social media links
    - Include testimonials section
    """)

    if st.button("Generate Project Plan"):
        with st.spinner("Generating your project management plan... This may take a few moments."):
            try:
                project_management = run_project_flow(project, industry, project_objectives, team_members, project_requirements)
                st.success("Project plan generation complete!")

                # Display the generated project management content dynamically
                st.subheader("Generated Project Management Plan")
                # Assuming 'project_management' is a dictionary or has list-like content for tasks and milestones
                tasks = project_management["tasks"]  # Extract tasks from the project management
                milestones = project_management["milestones"]  # Extract milestones from the project management

                # Loop through tasks and display each one
                st.markdown("### Tasks:")
                for task in tasks:
                    st.markdown(f"**Task Name**: {task.task_name}")
                    st.markdown(f"**Estimated Time**: {task.estimated_time_hours} hours")
                    st.markdown(f"**Required Resources**: {', '.join(task.required_resources)}")
                    st.markdown("---")  # Divider between tasks

                # Loop through milestones and display each one
                st.markdown("### Milestones:")
                for milestone in milestones:
                    st.markdown(f"**Milestone Name**: {milestone.milestone_name}")
                    st.markdown("**Tasks Included**:")
                    for task_name in milestone.tasks:
                        st.markdown(f"- {task_name}")
                    st.markdown("---")  # Divider between milestones

                # Optionally, allow users to download the project management plan in JSON format
                st.download_button("Download Project Plan", str(project_management), file_name="project_plan.json")

            except Exception as e:
                st.error(f"An error occurred: {e}")



if __name__ == "__main__":
    main()

def run_streamlit_app():
    import sys
    import streamlit.web.cli
    print(__file__)
    # Prepare the sys.argv list so that Streamlit knows which file to run.
    sys.argv = ["streamlit", "run", __file__]
    streamlit.web.cli.main()

def kickoff():
    project_flow = ProjectFlow()
    project_flow.kickoff()

    

def plot():
    project_flow = ProjectFlow()
    project_flow.plot()


# if __name__ == "__main__":
#     kickoff()
